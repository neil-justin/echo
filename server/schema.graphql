scalar Date

type User {
  id: String!
  uid: String!
  email: String!
  firstName: String!
  lastName: String!
  createdAt: Date!
  updatedAt: Date!
  avatar: String
}

type AddUserMutationResponse {
  code: String!
  success: Boolean!
  message: String!
  user: User
}

type GenerateTokenMutationResponse {
  code: String!
  success: Boolean!
  message: String!
  token: String!
  user: User
}

type SearchedUsersQueryResponse {
  code: String!
  success: Boolean!
  message: String!
  users: [User]
}

type LastMessage {
  senderId: String!
  content: String!
  timestamp: Date!
}

type Conversation {
  id: String!
  lastMessage: LastMessage!
  participants: [User]
  createdAt: Date!
  updatedAt: Date!
}

type Message {
  id: String!
}

type UserConversationsQueryResponse {
  code: String!
  success: Boolean!
  message: String!
  conversations: [Conversation]!
}

type SendMessageMutationResponse {
  code: String!
  success: Boolean!
  httpMessage: String!
  message: Message!
  conversation: Conversation!
}

type Query {
  searchedUsers(searchTerm: String!): SearchedUsersQueryResponse
  userConversations(userId: String!): UserConversationsQueryResponse
}

type Mutation {
  addUser(
    uid: String!
    email: String!
    firstName: String!
    lastName: String!
  ): AddUserMutationResponse
  generateToken(email: String!): GenerateTokenMutationResponse
  sendMessage(
    senderId: String!
    recipientId: String!
    message: String!
  ): SendMessageMutationResponse!
}
